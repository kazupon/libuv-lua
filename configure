#!/usr/bin/env python
"""
From <https://github.com/joyent/node/blob/master/configure-gyp>
"""

import optparse
import os
import json
import sys
import glob
import shutil

root_dir = os.path.dirname(__file__)

sys.path.insert(0, os.path.join(root_dir, 'tools', 'gyp', 'pylib'))
import gyp

# parse our options
parser = optparse.OptionParser()

parser.add_option("--debug",
    action="store_true",
    dest="debug",
    help="Build debug build")

parser.add_option("--prefix",
    action="store",
    dest="prefix",
    help="Select the install prefix (defaults to /usr/local)")

parser.add_option("--arch",
    action="store",
    dest="arch",
    help="Select the default architecture (ia32,x64,arm)")

parser.add_option("--shared-lua",
    action="store_true",
    dest="shared_lua",
    help="Link to a shared lua DLL instead of static linking")

parser.add_option("--shared-lua-includes",
    action="store",
    dest="shared_lua_includes",
    help="Directory containing lua header files")

parser.add_option("--shared-lua-libpath",
    action="store",
    dest="shared_lua_libpath",
    help="A directory to search for the shared lua DLL")

parser.add_option("--shared-lua-libname",
    action="store",
    dest="shared_lua_libname",
    help="Alternative lib name to link to (default: 'lua')")

(options, args) = parser.parse_args()


def b(value):
  """Returns the string 'true' if value is truthy, 'false' otherwise."""
  if value:
    return 'true'
  else:
    return 'false'

def pkg_config(pkg):
  cmd = os.popen('pkg-config --libs %s' % pkg, 'r')
  libs = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  cmd = os.popen('pkg-config --cflags %s' % pkg, 'r')
  cflags = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  return (libs, cflags)


def uname(switch):
  f = os.popen('uname %s' % switch)
  s = f.read().strip()
  f.close()
  return s


def host_arch():
  """Host architecture. One of arm, ia32 or x64."""

  if sys.platform == "win32":
      return 'ia32'

  if sys.platform == "darwin":
      return 'ia32'

  arch = uname('-p')

  if arch == 'unknown':
    arch = uname('-m')

  return {
    'arm': 'arm',
    'x86': 'ia32',
    'i386': 'ia32',
    'i486': 'ia32',
    'i586': 'ia32',
    'i686': 'ia32',
    'x86_64': 'x64',
    'amd64': 'x64',
  }.get(arch, arch)


def target_arch():
  # TODO act on options.dest_cpu
  return host_arch()


def configure_libuv_lua(o):
  # TODO add gdb and dest_cpu
  o['variables']['libuvlua_debug'] = 'true' if options.debug else 'false'
  o['variables']['libuvlua_prefix'] = options.prefix if options.prefix else ''
  o['variables']['host_arch'] = host_arch()
  o['variables']['target_arch'] = options.arch if options.arch else target_arch()
  o['default_configuration'] = 'Debug' if options.debug else 'Release'


  t_os = gyp.common.GetFlavor({})
  t_arch = o['variables']['target_arch']
  print " target architecture: %s-%s" % (t_os, t_arch)

def configure_lua(o):
  o['variables']['libuvlua_shared_lua'] = b(options.shared_lua)

  # assume shared_lua if one of these is set?
  if options.shared_lua_libpath:
    o['libraries'] += ['-L%s' % options.shared_lua_libpath]
  if options.shared_lua_libname:
    o['libraries'] += ['-l%s' % options.shared_lua_libname]
  elif options.shared_lua:
    o['libraries'] += ['-llua']
  if options.shared_lua_includes:
    o['include_dirs'] += [options.shared_lua_includes]
    o['variables']['libuvlua_shared_lua_includes'] = options.shared_lua_includes


print "configure options:", options

output = {
  'variables': {},
  'include_dirs': [],
  'libraries': [],
  'defines': [],
  'cflags': [],
}

configure_libuv_lua(output)
configure_lua(output)


# variables should be a root level element,
# move everything else to target_defaults
variables = output['variables']
del output['variables']
output = {
  'variables': variables,
  'target_defaults': output
}

fn = os.path.join(root_dir, 'options.gypi')
print "creating ", fn

f = open(fn, 'w+')
f.write("# Do not edit. Generated by the configure script.\n")
json.dump(output, f, indent=2, skipkeys=True)
f.write("\n")
f.close()

print "Generating build system with GYP..."

if sys.platform == "win32":
    code = os.system("python tools\gyp_libuvlua -f msvs -G msvs_version=2010")
else:
    code = os.system("tools/gyp_libuvlua")

if code == 0:
    print ""
    print "Done!"
    print ""
    if sys.platform == "win32":
        print "Now run `python build.py` to build!"
    else:
        print "Now run `make -C out` to build!"
    print ""
else:
    print ""
    print "Error occured. Please investigate details above."
    print ""

